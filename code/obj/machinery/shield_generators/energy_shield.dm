/obj/machinery/shieldgenerator/energy_shield
	name = "Energy-Shield Generator"
	desc = "Solid matter can pass through the shields generated by this generator."
	icon = 'icons/obj/meteor_shield.dmi'
	icon_state = "energyShield"
	density = 0
	var/orientation = 1  //shield extend direction 0 = north/south, 1 = east/west
	power_level = 1 //1 for atmos shield, 2 for liquid, 3 for solid material
	var/MAX_POWER_LEVEL = 3
	var/MIN_POWER_LEVEL = 1
	min_range = 1
	max_range = 4
	direction = "dir"
	layer = 3

	nocell
		starts_with_cell = FALSE

	New()
		..()
		display_active.icon_state = "energyShieldOn"
		src.power_usage = 5

	get_desc(dist, mob/user)
		..()
		var/charge_percentage = 0
		if (PCEL?.charge > 0 && PCEL.maxcharge > 0)
			charge_percentage = round((PCEL.charge/PCEL.maxcharge)*100)
			. += "It has [PCEL.charge]/[PCEL.maxcharge] ([charge_percentage]%) battery power left."
		else
			. += "It seems to be missing a usable battery."
		. += "The unit will consume [get_draw()] power a second."
		. += "The range setting is set to [src.range]."
		. += "The power setting is set to [src.power_level]."

	shield_on()
		if (PCEL && PCEL.charge > 0) //first, try to activate off cell power
			generate_shield()
		else //no cell power? attempt to grid boot
			if (!line_powered()) //no cell, no grid, no activation
				src.power_usage = 0
			else //activate off line power
				generate_shield()
				src.power_usage = get_draw()


	pulse(var/mob/user)
		if(active)
			boutput(user, "<span class='alert'>You can't change the power level or range while the generator is active.</span>")
			return
		var/list/choices = list("Set Range")
		if(MAX_POWER_LEVEL != MIN_POWER_LEVEL)
			choices += "Set Power Level"
		var/input
		if(length(choices) == 1)
			input = choices[1]
		else
			input = input("Select a config to modify!", "Config", null) as null|anything in choices
		if(input && (user in range(1,src)))
			switch(input)
				if("Set Range")
					src.set_range(user)
				if("Set Power Level")
					var/the_level = input("Enter a power level from [src.MIN_POWER_LEVEL]-[src.MAX_POWER_LEVEL]. Higher levels use more power.","[src.name]",1) as null|num
					if(!the_level)
						return
					if(BOUNDS_DIST(user, src) > 0)
						boutput(user, "<span class='alert'>You flail your arms at [src] from across the room like a complete muppet. Move closer, genius!</span>")
						return
					the_level = clamp(the_level, MIN_POWER_LEVEL, MAX_POWER_LEVEL)
					src.power_level = the_level
					boutput(user, "<span class='notice'>You set the power level to [src.power_level].</span>")

	//Code for placing the shields and adding them to the generator's shield list
	proc/generate_shield()
		update_orientation()
		var/xa= -range-1
		var/ya= -range-1
		var/turf/T
		if (range == 0)
			var/obj/forcefield/energyshield/S = new /obj/forcefield/energyshield ( locate((src.x),(src.y),src.z), src , 1 )
			S.icon_state = "enshieldw"
			src.deployed_shields += S
		else
			for (var/i = 0-range, i <= range, i++)
				if (orientation)
					T = locate((src.x+i),(src.y),src.z)
					xa++
					ya = 0
				else
					T = locate((src.x),(src.y+i), src.z)
					ya++
					xa = 0

				if (T.canpass())
					createForcefieldObject(xa, ya);

		src.anchored = 1
		src.active = 1

		// update_nearby_tiles()
		playsound(src.loc, src.sound_on, 50, 1)
		if (src.power_level == 1)
			display_active.color = "#0000FA"
		else if (src.power_level == 2)
			display_active.color = "#00FF00"
		else
			display_active.color = "#FA0000"
		build_icon()

	//Changes shield orientation based on direction the generator is facing
	proc/update_orientation()
		if (src.dir == NORTH || src.dir == SOUTH)
			orientation = 0
		else
			orientation = 1

	proc/createForcefieldObject(xa, ya, turf/T)
		if(isnull(T))
			T = locate((src.x + xa), (src.y + ya), src.z)
		var/obj/forcefield/energyshield/S = new /obj/forcefield/energyshield(T, src, TRUE)
		S.layer = 2
		src.deployed_shields += S
		return S


/obj/machinery/shieldgenerator/energy_shield/doorlink
	name = "Door-Shield Generator"
	desc = "Interfaces with nearby doors, generating linked atmospheric or liquid shielding for them."
	icon_state = "doorShield"
	direction = ""
	MAX_POWER_LEVEL = 2
	max_range = 3
	var/emagged = FALSE

	nocell
		starts_with_cell = FALSE

	New()
		..()
		display_active.icon_state = "doorShieldOn"

	emag_act(var/mob/user) //blow out the limiter. max power increases to 3 (total blocking), but it loses the ability to throttle its operation
		if (!src.emagged)
			if (user)
				user.show_text("You short out the integrated limiting circuits.", "blue")
			src.desc += " Smells faintly of burnt electronics."
			src.emagged = 1
			src.MAX_POWER_LEVEL = 3
			return 1
		else
			if (user)
				user.show_text("This has already been tampered with.", "red")
			return 0

	generate_shield()
		if (range < 1)
			return
		for (var/obj/machinery/door/D in orange(src.range,src))
			if(!D.linked_forcefield && !istype(D,/obj/machinery/door/firedoor))
				createDoorForcefield(D)
		// update_nearby_tiles()
		playsound(src.loc, src.sound_on, 50, 1)
		if (src.power_level == 1)
			display_active.color = "#0000FA"
		else if (src.power_level == 2)
			display_active.color = "#00FF00"
		else
			display_active.color = "#FA0000"
		build_icon()

	get_draw()
		var/shield_draw = 0
		for(var/obj/forcefield/energyshield/S in src.deployed_shields)
			shield_draw += 1 //small maintenance draw per shielded door, and full power if shield is active
			if(S.isactive) shield_draw += 15 //overall cost slightly higher per shield compared to standard generators
		return shield_draw * (src.power_level * src.power_level)

	process()
		if(src.active)
			src.get_draw()
		. = ..()

	proc/createDoorForcefield(var/obj/machinery/door/D)
		var/obj/forcefield/energyshield/S = new /obj/forcefield/energyshield (get_turf(D), src, 1) //1 update tiles

		S.layer = 2
		S.set_dir(D.dir)
		if(!src.emagged)
			S.linked_door = D
			D.linked_forcefield = S

			if(D.density != 0)
				S.setactive(0)

		src.deployed_shields += S

		return S

/obj/machinery/shieldgenerator/energy_shield/botany
	name = "smoke shield generator"
	icon_state = "botanygen"
	desc = "For all your hotboxing needs."
	density = 0
	MIN_POWER_LEVEL = 1
	MAX_POWER_LEVEL = 1

	update_orientation()
		orientation = 0

	generate_shield()
		for(var/turf/T in orange(src, range))
			if(GET_DIST(T, src) != range)
				continue
			if (!T.density && !T.gas_impermeable)
				var/obj/forcefield/energyshield/shield = createForcefieldObject(T=T)
				animate(shield, time=5 SECONDS, loop=-1, easing=SINE_EASING, color="#88FF00")
				animate(time=5 SECONDS, loop=-1, easing=SINE_EASING, color="#0088FF")

		src.anchored = 1
		src.active = 1

		playsound(src.loc, src.sound_on, 50, 1)
		display_active.color = "#00FF00"
		build_icon()

